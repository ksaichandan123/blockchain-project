<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payment Confirmation</title>

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 800px;
            margin: 50px auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .btn-primary:hover {
            background-color: #0056b3;
        }

        .text-danger {
            color: #dc3545;
        }
    </style>
</head>

<body onload="connectContract()">
    
    <%- include('navbar') %>

    <div class="container">
        <h1 class="mt-4">Payment Confirmation</h1>
        <p>You are about to make a payment of <span id="serviceCost" class="font-weight-bold"></span> via Metamask.</p>
        <p>Please review the details before confirming the transaction.</p>

        <button id="connectToMetamask" onclick="connectMetamask(); depositContract();" class="btn btn-primary">
            Connect to Metamask
        </button>
        <p id="userArea" class="mt-3"></p>
        <p id="contractDetails" class="mt-3">Contract Details: Loading...</p>
        <p id="contractDetails1" class="mt-2">Contract Account: Loading...</p>
        <p id="contractDetails2" class="mt-2">Contract Balance: Loading...</p>
        <input type="hidden" id="serviceId" value="<%= service.id %>">
    </div>

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

  
    <script>
        let account;

        const connectMetamask = async () => {
            try {
                if (window.ethereum !== "undefined") {
                    const accounts = await ethereum.request({ method: "eth_requestAccounts" });
                    account = accounts[0];
                    document.getElementById("userArea").innerHTML = `Logged in via User Account: ${account}`;
                }
            } catch (error) {
                console.error("Error connecting to MetaMask:", error);
            }
        };

        async function connectContract() {
            try {
                const ABI = [
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_serviceId",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "_name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "_cost",
				"type": "uint256"
			}
		],
		"name": "addService",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_serviceId",
				"type": "uint256"
			}
		],
		"name": "purchaseService",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "buyer",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "serviceId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "cost",
				"type": "uint256"
			}
		],
		"name": "ServicePurchased",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address payable",
				"name": "_to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "_amount",
				"type": "uint256"
			}
		],
		"name": "withdraw",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "_serviceId",
				"type": "uint256"
			}
		],
		"name": "getServiceCost",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "services",
		"outputs": [
			{
				"internalType": "string",
				"name": "name",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "cost",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

                const contractAddress = '0x3a89a52b8794406cd7b50a25ebba84dce24777e4'; 
                window.web3 = await new Web3(window.ethereum);
                window.contract = await new window.web3.eth.Contract(ABI, contractAddress);
                document.getElementById("contractDetails").innerHTML = "Connected to Contract";
                getContractAccount();
            } catch (error) {
                console.error("Error connecting to contract:", error);
            }
        }

        async function getContractAccount() {
    try {
        const accounts = await ethereum.request({ method: "eth_requestAccounts" });
        account = accounts[0];

       
        const data = await window.contract.methods.owner().call();
        document.getElementById("contractDetails1").innerHTML = `Contract Account: ${data}`;

      
        const serviceId = 1;
        const service = await window.contract.methods.services(serviceId).call();
        const serviceCost = service.cost;
        document.getElementById("serviceCost").textContent = `${serviceCost} Eth`;

    } catch (error) {
        console.error("Error getting contract account:", error);
    }
}


        async function fetchServiceCost() {
            try {
     
                const serviceCost = await window.contract.methods.getServiceCost().call();
                document.getElementById("serviceCost").textContent = `${serviceCost} Eth`;
            } catch (error) {
                console.error("Error fetching service cost:", error);
            }
        }

        async function depositContract() {
            try {
                const PaymentValueString = localStorage.getItem('AmountToPay');
                const serviceCost = localStorage.getItem('ServiceCost');
                document.getElementById("serviceCost").textContent = `${serviceCost} Eth`;
				const serviceId = document.getElementById('serviceId').value;
                const amountNum = Number(PaymentValueString);
                const amount = amountNum * 1000000000000000000; // Convert Eth to Wei
				const transaction = await window.contract.methods.purchaseService(serviceId).send({ from: account, value: amount });

            
            if (transaction.status) {
                
                window.location.href = '/payment-confirmed';
            } else {
                console.error("Transaction failed.");
            }
        } catch (error) {
            console.error("Error depositing to contract:", error);
        }

        }

        async function ShowContractDetails() {
            try {
                const contractBalance = await window.contract.methods.getBalance().call();
                document.getElementById("contractDetails2").innerHTML = `Contract Balance: ${contractBalance} wei`;
            } catch (error) {
                console.error("Error fetching contract details:", error);
            }
        }
    </script>
</body>
</html>
